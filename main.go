/* Код проекта на Go оформляется в модулях, модули не должны быть вложенными, Го не поддерживает вложенность. Модуль создали, теперь нужно решить со структурой директории, это зависит от проекта, можно выделить 2 подхода: flat - плоский или простой, layout(размещение, планировка) - список рекомендуемых директорий, которые собрало сообщество по рекомендациям от идиологов языка.Layout нужен будет на 30 модуле, когда будем делать сервис, больше подходит для крупных проектов. Для задания 27 модуля подойдёт обычный Flat.В этом случае в корне останется файл main.go - точка запуска, точка входа, весь остальной код будет распределяться по директориям. Имена могут быть произвольные, которые зависят от проекта. 
1 Создаём main.go, пакет main // app структура нужна для того чтобы была ссылка, хранился где-то указатель на репозиторий / в принципе можно обойтись функциями, просто в данном задании мы знакомимся с методами/ app чаще занимается созданием экземпляров компонентов приложения,передачей зависимостей,а логика - если у нас крупное приложение уйдет контролер/
2 Прикидываем структуру приложения, создаем директорию app
3 Пакет где хранятся структуры, описывающие данные model/entities
4 Часть программы, которая хранит данные ropisitory
Разработка приложения чаще всего начинается с описания данных, с которыми будем работать.Пока не знаем с чем работать, непонятно как писать код. Переходим в раздел model, чтобы описать модель данных нашего студента */
package main

import (
	"decomposition/app"
	"decomposition/repository"
)

func main() { // имена переменных нельзя называть также как и пути импорта на конце
	storage := repository.NewMemStorage() // создалось репозиторий/хранилище, обращаемся к функции конструктора, вернет указатель на инициализированную структуру, там уже будет создана хешкарта
	instanceApp := app.New(storage)       // экземпляр приложения и передае туда ссылку на репозиторий, можем передать в приложение, когда есть все нужные методы
	instanceApp.Run() // при создании метода Run в app создаём запуск в main
}
